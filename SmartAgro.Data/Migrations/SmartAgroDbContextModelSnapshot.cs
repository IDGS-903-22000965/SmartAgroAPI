// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartAgro.Data;

#nullable disable

namespace SmartAgro.Data.Migrations
{
    [DbContext(typeof(SmartAgroDbContext))]
    partial class SmartAgroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<bool>("Aprobado")
                        .HasColumnType("bit");

                    b.Property<int>("Calificacion")
                        .HasColumnType("int");

                    b.Property<string>("Contenido")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("FechaComentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime?>("FechaRespuesta")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<string>("RespuestaAdmin")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VentaId");

                    b.ToTable("Comentarios", t =>
                        {
                            t.HasCheckConstraint("CK_Comentario_Calificacion", "Calificacion >= 1 AND Calificacion <= 5");
                        });
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.CompraProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("NumeroCompra")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("NumeroCompra")
                        .IsUnique();

                    b.HasIndex("ProveedorId");

                    b.ToTable("ComprasProveedores");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Cotizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AreaCultivo")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DireccionInstalacion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EnergiaElectricaDisponible")
                        .HasColumnType("bit");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaCotizacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FuenteAguaDisponible")
                        .HasColumnType("bit");

                    b.Property<decimal>("Impuestos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroCotizacion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("PorcentajeImpuesto")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("RequierimientosEspeciales")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TelefonoCliente")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TipoCultivo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TipoSuelo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NumeroCotizacion")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Cotizaciones");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleCompraProveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CompraProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("MateriaPrimaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CompraProveedorId");

                    b.HasIndex("MateriaPrimaId");

                    b.ToTable("DetallesCompraProveedor");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleCotizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("CotizacionId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId");

                    b.HasIndex("ProductoId");

                    b.ToTable("DetallesCotizacion");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VentaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductoId");

                    b.HasIndex("VentaId");

                    b.ToTable("DetallesVenta");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.MateriaPrima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<decimal>("CostoUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProveedorId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("StockMinimo")
                        .HasColumnType("int");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("Nombre", "ProveedorId")
                        .IsUnique();

                    b.ToTable("MateriasPrimas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            CostoUnitario = 450.00m,
                            Descripcion = "Microcontrolador Arduino Uno Rev3",
                            Nombre = "Arduino Uno R3",
                            ProveedorId = 1,
                            Stock = 50,
                            StockMinimo = 10,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            CostoUnitario = 85.00m,
                            Descripcion = "Sensor de humedad de suelo resistivo",
                            Nombre = "Sensor Humedad Suelo",
                            ProveedorId = 1,
                            Stock = 100,
                            StockMinimo = 20,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            CostoUnitario = 120.00m,
                            Descripcion = "Sensor de calidad de aire MQ-135",
                            Nombre = "Sensor Calidad Aire MQ-135",
                            ProveedorId = 2,
                            Stock = 75,
                            StockMinimo = 15,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 4,
                            Activo = true,
                            CostoUnitario = 180.00m,
                            Descripcion = "Módulo WiFi ESP8266 NodeMCU",
                            Nombre = "Módulo WiFi ESP8266",
                            ProveedorId = 2,
                            Stock = 60,
                            StockMinimo = 12,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 5,
                            Activo = true,
                            CostoUnitario = 45.00m,
                            Descripcion = "Relé electromecánico 5V 10A",
                            Nombre = "Relé 5V 10A",
                            ProveedorId = 2,
                            Stock = 80,
                            StockMinimo = 16,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 6,
                            Activo = true,
                            CostoUnitario = 320.00m,
                            Descripcion = "Electroválvula solenoide 12V 1/2 pulgada",
                            Nombre = "Electroválvula 12V",
                            ProveedorId = 3,
                            Stock = 40,
                            StockMinimo = 8,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 7,
                            Activo = true,
                            CostoUnitario = 280.00m,
                            Descripcion = "Bomba de agua sumergible 12V 5L/min",
                            Nombre = "Bomba de Agua 12V",
                            ProveedorId = 3,
                            Stock = 30,
                            StockMinimo = 6,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 8,
                            Activo = true,
                            CostoUnitario = 150.00m,
                            Descripcion = "Fuente de alimentación 12V 2A",
                            Nombre = "Fuente 12V 2A",
                            ProveedorId = 2,
                            Stock = 45,
                            StockMinimo = 9,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 9,
                            Activo = true,
                            CostoUnitario = 220.00m,
                            Descripcion = "Caja hermética para exteriores IP65",
                            Nombre = "Caja Protección IP65",
                            ProveedorId = 1,
                            Stock = 35,
                            StockMinimo = 7,
                            UnidadMedida = "Pieza"
                        },
                        new
                        {
                            Id = 10,
                            Activo = true,
                            CostoUnitario = 12.50m,
                            Descripcion = "Cable multicore 6 hilos calibre 20 AWG",
                            Nombre = "Cable Multicore 10m",
                            ProveedorId = 2,
                            Stock = 200,
                            StockMinimo = 40,
                            UnidadMedida = "Metro"
                        },
                        new
                        {
                            Id = 11,
                            Activo = true,
                            CostoUnitario = 65.00m,
                            Descripcion = "Set conectores impermeables IP67",
                            Nombre = "Conectores Impermeables",
                            ProveedorId = 1,
                            Stock = 70,
                            StockMinimo = 14,
                            UnidadMedida = "Set"
                        },
                        new
                        {
                            Id = 12,
                            Activo = true,
                            CostoUnitario = 8.50m,
                            Descripcion = "Manguera para riego 1/2 pulgada",
                            Nombre = "Manguera Riego 1/2\"",
                            ProveedorId = 3,
                            Stock = 300,
                            StockMinimo = 60,
                            UnidadMedida = "Metro"
                        });
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Beneficios")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Caracteristicas")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DescripcionDetallada")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("ImagenPrincipal")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagenesSecundarias")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PorcentajeGanancia")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("PrecioBase")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioVenta")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VideoDemo")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Beneficios = "[\"Ahorro de agua hasta 40%\", \"Mejora la salud de cultivos\", \"Reduce tiempo de mantenimiento\", \"Control remoto total\", \"Datos históricos para análisis\", \"Escalable a múltiples zonas\"]",
                            Caracteristicas = "[\"Monitoreo 24/7 automático\", \"Sensores de humedad de precisión\", \"Control de calidad del aire\", \"App móvil Android nativa\", \"Conectividad WiFi\", \"Dashboard web\", \"Notificaciones en tiempo real\", \"Configuración personalizable\", \"Resistente a intemperie IP65\", \"Fácil instalación\"]",
                            Descripcion = "Sistema IoT completo para automatización de riego con monitoreo de humedad del suelo y calidad del aire",
                            DescripcionDetallada = "El Sistema de Riego Automático Inteligente de SmartAgro IoT Solutions es una solución integral que combina tecnología IoT de vanguardia con sensores de precisión para optimizar el riego de cultivos y espacios verdes. \r\n\r\nEl sistema incluye:\r\n- Monitoreo continuo de humedad del suelo mediante sensores calibrados\r\n- Seguimiento de calidad del aire en tiempo real\r\n- Control automático de riego basado en parámetros configurables\r\n- Aplicación móvil Android para control y monitoreo remoto\r\n- Conectividad WiFi para acceso desde cualquier lugar\r\n- Dashboard con análisis de datos históricos\r\n- Alertas y notificaciones push en tiempo real\r\n\r\nIdeal para agricultores, jardineros profesionales y entusiastas de la jardinería que buscan optimizar el uso del agua y mejorar la salud de sus cultivos mediante tecnología inteligente.",
                            FechaCreacion = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImagenPrincipal = "/images/sistema-riego-principal.jpg",
                            ImagenesSecundarias = "[\"/images/sistema-riego-1.jpg\", \"/images/sistema-riego-2.jpg\", \"/images/sistema-riego-3.jpg\", \"/images/app-mobile.jpg\"]",
                            Nombre = "Sistema de Riego Automático Inteligente",
                            PorcentajeGanancia = 35.00m,
                            PrecioBase = 2500.00m,
                            PrecioVenta = 3375.00m,
                            VideoDemo = "https://www.youtube.com/embed/demo-video-id"
                        });
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.ProductoMateriaPrima", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CantidadRequerida")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("CostoTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoUnitario")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MateriaPrimaId")
                        .HasColumnType("int");

                    b.Property<string>("Notas")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MateriaPrimaId");

                    b.HasIndex("ProductoId", "MateriaPrimaId")
                        .IsUnique();

                    b.ToTable("ProductoMateriasPrimas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CantidadRequerida = 1m,
                            CostoTotal = 450.00m,
                            CostoUnitario = 450.00m,
                            MateriaPrimaId = 1,
                            Notas = "Controlador principal del sistema",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 2,
                            CantidadRequerida = 2m,
                            CostoTotal = 170.00m,
                            CostoUnitario = 85.00m,
                            MateriaPrimaId = 2,
                            Notas = "Sensores para diferentes zonas",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 3,
                            CantidadRequerida = 1m,
                            CostoTotal = 120.00m,
                            CostoUnitario = 120.00m,
                            MateriaPrimaId = 3,
                            Notas = "Monitoreo calidad aire",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 4,
                            CantidadRequerida = 1m,
                            CostoTotal = 180.00m,
                            CostoUnitario = 180.00m,
                            MateriaPrimaId = 4,
                            Notas = "Conectividad WiFi",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 5,
                            CantidadRequerida = 2m,
                            CostoTotal = 90.00m,
                            CostoUnitario = 45.00m,
                            MateriaPrimaId = 5,
                            Notas = "Control electroválvulas",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 6,
                            CantidadRequerida = 2m,
                            CostoTotal = 640.00m,
                            CostoUnitario = 320.00m,
                            MateriaPrimaId = 6,
                            Notas = "Válvulas para riego",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 7,
                            CantidadRequerida = 1m,
                            CostoTotal = 280.00m,
                            CostoUnitario = 280.00m,
                            MateriaPrimaId = 7,
                            Notas = "Bomba principal",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 8,
                            CantidadRequerida = 1m,
                            CostoTotal = 150.00m,
                            CostoUnitario = 150.00m,
                            MateriaPrimaId = 8,
                            Notas = "Alimentación sistema",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 9,
                            CantidadRequerida = 1m,
                            CostoTotal = 220.00m,
                            CostoUnitario = 220.00m,
                            MateriaPrimaId = 9,
                            Notas = "Protección intemperie",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 10,
                            CantidadRequerida = 15m,
                            CostoTotal = 187.50m,
                            CostoUnitario = 12.50m,
                            MateriaPrimaId = 10,
                            Notas = "Cableado sistema",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 11,
                            CantidadRequerida = 1m,
                            CostoTotal = 65.00m,
                            CostoUnitario = 65.00m,
                            MateriaPrimaId = 11,
                            Notas = "Conexiones seguras",
                            ProductoId = 1
                        },
                        new
                        {
                            Id = 12,
                            CantidadRequerida = 20m,
                            CostoTotal = 170.00m,
                            CostoUnitario = 8.50m,
                            MateriaPrimaId = 12,
                            Notas = "Mangueras distribución",
                            ProductoId = 1
                        });
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("ContactoPrincipal")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RFC")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("RFC")
                        .IsUnique()
                        .HasFilter("[RFC] IS NOT NULL");

                    b.ToTable("Proveedores");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            ContactoPrincipal = "Juan Pérez",
                            Direccion = "Av. Industrial 123, León, Gto",
                            Email = "ventas@techcomponents.com",
                            FechaRegistro = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "TechComponents SA",
                            RFC = "TCO850101ABC",
                            RazonSocial = "TechComponents SA de CV",
                            Telefono = "477-123-4567"
                        },
                        new
                        {
                            Id = 2,
                            Activo = true,
                            ContactoPrincipal = "María González",
                            Direccion = "Calle Electrónica 456, León, Gto",
                            Email = "contacto@electrosupply.mx",
                            FechaRegistro = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "ElectroSupply MX",
                            RFC = "ESM920201DEF",
                            RazonSocial = "ElectroSupply México SA de CV",
                            Telefono = "477-234-5678"
                        },
                        new
                        {
                            Id = 3,
                            Activo = true,
                            ContactoPrincipal = "Carlos Martínez",
                            Direccion = "Blvd. Agricultura 789, León, Gto",
                            Email = "info@agrotech-dist.com",
                            FechaRegistro = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nombre = "AgroTech Distribuidores",
                            RFC = "ATD780301GHI",
                            RazonSocial = "AgroTech Distribuidores SA de CV",
                            Telefono = "477-345-6789"
                        });
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CotizacionId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoVenta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("Impuestos")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NumeroVenta")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CotizacionId");

                    b.HasIndex("NumeroVenta")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("Ventas");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Comentario", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Producto", "Producto")
                        .WithMany("Comentarios")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Usuario", "Usuario")
                        .WithMany("Comentarios")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Venta", "Venta")
                        .WithMany()
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Producto");

                    b.Navigation("Usuario");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.CompraProveedor", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Cotizacion", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Usuario", "Usuario")
                        .WithMany("Cotizaciones")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleCompraProveedor", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.CompraProveedor", "CompraProveedor")
                        .WithMany("Detalles")
                        .HasForeignKey("CompraProveedorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.MateriaPrima", "MateriaPrima")
                        .WithMany("DetallesCompra")
                        .HasForeignKey("MateriaPrimaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompraProveedor");

                    b.Navigation("MateriaPrima");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleCotizacion", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Cotizacion", "Cotizacion")
                        .WithMany("Detalles")
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Producto", "Producto")
                        .WithMany("DetallesCotizacion")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cotizacion");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.DetalleVenta", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Producto", "Producto")
                        .WithMany("DetallesVenta")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Venta", "Venta")
                        .WithMany("Detalles")
                        .HasForeignKey("VentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producto");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.MateriaPrima", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Proveedor", "Proveedor")
                        .WithMany("MateriasPrimas")
                        .HasForeignKey("ProveedorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.ProductoMateriaPrima", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.MateriaPrima", "MateriaPrima")
                        .WithMany("ProductoMateriasPrimas")
                        .HasForeignKey("MateriaPrimaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartAgro.Models.Entities.Producto", "Producto")
                        .WithMany("ProductoMateriasPrimas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MateriaPrima");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Venta", b =>
                {
                    b.HasOne("SmartAgro.Models.Entities.Cotizacion", "Cotizacion")
                        .WithMany()
                        .HasForeignKey("CotizacionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SmartAgro.Models.Entities.Usuario", "Usuario")
                        .WithMany("Compras")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cotizacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.CompraProveedor", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Cotizacion", b =>
                {
                    b.Navigation("Detalles");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.MateriaPrima", b =>
                {
                    b.Navigation("DetallesCompra");

                    b.Navigation("ProductoMateriasPrimas");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Producto", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("DetallesCotizacion");

                    b.Navigation("DetallesVenta");

                    b.Navigation("ProductoMateriasPrimas");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("MateriasPrimas");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Usuario", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Compras");

                    b.Navigation("Cotizaciones");
                });

            modelBuilder.Entity("SmartAgro.Models.Entities.Venta", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
